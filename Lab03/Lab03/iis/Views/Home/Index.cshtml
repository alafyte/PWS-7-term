<!DOCTYPE html>
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Student Management</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-3.4.1.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .container-fluid {
            display: flex;
            justify-content: space-between;
            padding: 20px;
            gap: 20px;
        }

        .container-left,
        .container-right {
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .container-left {
            width: 35%;
        }

        .container-right {
            width: 60%;
        }

        .input-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            font-weight: bold;
        }

        .form-control {
            border-radius: 4px;
        }

        .btn-primary {
            background-color: #007bff;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 14px;
            transition: background-color 0.3s;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }

        .btn-secondary {
            padding: 8px 16px;
            border-radius: 4px;
            border: 1px solid #6c757d;
            background-color: white;
            color: #6c757d;
        }

            .btn-secondary:hover {
                background-color: #e2e6ea;
            }

        table {
            width: 100%;
            border-collapse: collapse;
        }

            table th,
            table td {
                padding: 10px;
                text-align: left;
            }

            table thead {
                background-color: #007bff;
                color: white;
            }

        .error-message {
            font-size: 12px;
            color: red;
        }

        .error-input {
            border-color: red;
        }

        .pagination-buttons {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <!-- Left Side: Form for Filters -->
        <div class="container-left">

            <!-- Filters -->
            <div class="form-group">
                <label class="form-check-label">Message Format:</label>
                <div class="d-flex">
                    <div class="form-check mr-3">
                        <input class="form-check-input" type="radio" name="format" id="jsonFormat" value="json" checked>
                        <label class="form-check-label" for="jsonFormat">JSON</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="format" id="xmlFormat" value="xml">
                        <label class="form-check-label" for="xmlFormat">XML</label>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="form-check-label">Sort By:</label>
                <div class="d-flex">
                    <div class="form-check mr-3">
                        <input class="form-check-input" type="radio" name="sort" id="sortById" value="id" checked>
                        <label class="form-check-label" for="sortById">ID</label>
                    </div>
                    <div class="form-check mr-3">
                        <input class="form-check-input" type="radio" name="sort" id="sortByName" value="name">
                        <label class="form-check-label" for="sortByName">Name</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="sort" id="sortByPhone" value="phone">
                        <label class="form-check-label" for="sortByPhone">Phone</label>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div id="error-offset" style="color: red;"></div>
                <label for="offset" class="form-label">Offset</label>
                <input type="text" id="offset" class="form-control" placeholder="Enter offset">
            </div>

            <div class="form-group">
                <div id="error-limit" style="color: red;"></div>
                <label for="limit">Limit</label>
                <input type="text" id="limit" class="form-control" placeholder="Enter limit">
            </div>

            <div class="form-group">
                <div id="error-minid" style="color: red;"></div>
                <label for="minid">Min ID</label>
                <input type="text" id="minid" class="form-control" placeholder="Enter min ID">
            </div>

            <div class="form-group">
                <div id="error-maxid" style="color: red;"></div>
                <label for="maxid">Max ID</label>
                <input type="text" id="maxid" class="form-control" placeholder="Enter max ID">
            </div>

            <div class="form-group">
                <label for="like">Name Like</label>
                <input type="text" id="like" class="form-control" placeholder="Enter name pattern">
            </div>

            <div class="form-group">
                <label for="global_like">Global Like</label>
                <input type="text" id="global_like" class="form-control" placeholder="Enter global pattern">
            </div>

            <div class="form-group">
                <label for="columns">Columns</label>
                <input type="text" id="columns" class="form-control" placeholder="Enter columns">
            </div>
        </div>

        <!-- Right Side: Table Display and Add Student Form -->
        <div class="container-right">
            <table class="table table-bordered table-striped">
                <thead id="tableTr" >
                </thead>
                <tbody id="tbl">
                    <!-- Dynamic rows will go here -->
                </tbody>
            </table>

            <!-- Pagination Buttons -->
            <div class="pagination-buttons">
                <button class="btn btn-secondary" id="prev" onClick="getPrevPage()">Prev</button>
                <button class="btn btn-secondary" id="next" onClick="getNextPage()">Next</button>
            </div>

            <!-- Form to Add a Student -->
            <h2 class="mt-3">Add Student</h2>
            <div class="form-group mb-3">
                <label for="name-post">Name</label>
                <input type="text" id="name-post" class="form-control" placeholder="Enter student name">
                <span id="nameError" class="error-message"></span>
            </div>

            <div class="form-group mb-3">
                <label for="phone-post">Phone Number</label>
                <input type="text" id="phone-post" class="form-control" placeholder="+375XXXXXXXXX" pattern="\+375\d{9}">
                <span id="phoneError" class="error-message"></span>
            </div>

            <div class="text-center">
                <button id="submitButton" class="btn btn-primary">Add Student</button>
            </div>
        </div>
    </div>

    <script src="~/Scripts/inputsValidation.js"></script>
    <script>
        var pagination = 0;
        var prevBtnBlocked = true;

        getStudents();

        async function createStudent(href, method) {
            let data =
            {
                name: $("#name-post").val(),
                phone: $("#phone-post").val()
            }
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                    });
            }
            clearField("name-post");
            clearField("phone-post");
        }

        async function updateStudent(href, method, id) {
            let data = {};

            if (document.getElementById(`${id}Name`)) {
                data.name = document.getElementById(`${id}Name`).value;
            }
            if (document.getElementById(`${id}Phone`)) {
                data.phone = document.getElementById(`${id}Phone`).value;
            }

            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Update was done", data);
                    });
            }
        }

        async function deleteStudent(href, method) {
            var selectedFormat = $('input[name="format"]:checked').val();
            if (selectedFormat === 'xml') {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/xml' }
                    })
                    .then((response) => {
                        return response.text();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
            else {
                fetch(href,
                    {
                        method: method,
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((data) => {
                        getStudents();
                        console.log("Delete was done", data);
                    });
            }
        }

        async function getNextPage() {
            if ($("#limit").val() != "") {
                var limit = 3;
                var limit = $("#limit").val();
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
            else {
                var limit = 3;
                pagination += parseInt(limit, 10);
                if (pagination - limit >= 0) {
                    prevBtnBlocked = false;
                }
                getStudents();
            }
        }

        async function getPrevPage() {
            if ($("#limit").val() != "") {
                var limit = $("#limit").val();
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
            else {
                var limit = 3;
                if (pagination - parseInt(limit, 10) <= 0) {
                    prevBtnBlocked = true;
                }
                if (pagination - parseInt(limit, 10) >= 0) {
                    pagination -= parseInt(limit, 10);
                    getStudents();
                }
            }
        }

        $(document).ready(function () {
            $('.container-left input').on('input', function () {
                if (isVal) {
                    getStudents();
                }
            });
        });

        async function getStudents() {
            let data = {};

            var selectedSort = $('input[name="sort"]:checked').val();
            data["sort"] = selectedSort;
            if ($("#offset").val() != "") data["offset"] = $("#offset").val();
            if ($("#limit").val() != "") data["limit"] = $("#limit").val();
            if ($("#minid").val() != "") data["minid"] = $("#minid").val();
            if ($("#maxid").val() != "") data["maxid"] = $("#maxid").val();
            if ($("#columns").val() != "") data["columns"] = $("#columns").val();
            if ($("#global_like").val() != "") data["globalLike"] = $("#global_like").val();
            if ($("#like").val() != "") data["like"] = $("#like").val();
            data["pagination"] = pagination;

            var selectedFormat = $('input[name="format"]:checked').val();
            var url = new URL(`/api/student.${selectedFormat}`, window.location.href);

            url.search = new URLSearchParams(data).toString();

            fetch(url,
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        'Accept': selectedFormat === 'json' ? 'application/json' : 'application/xml'
                    },
                    data: data
                })

                .then((response) => {
                    if (selectedFormat === 'json') {
                        return response.json();
                    } else if (selectedFormat === 'xml') {
                        return response.text();
                    } else {
                        return Promise.reject(new Error('Unsupported format: ' + selectedFormat));
                    }
                })

                .then((result) => {
                    let html = "";
                    let i = true;
                    $("#tbl").html('');

                    if (selectedFormat === 'xml') {

                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(result, 'application/xml');

                        var linkElement = xmlDoc.querySelector('AddStudent > link');
                        var hrefValue = linkElement.getAttribute('href');
                        var methodValue = linkElement.getAttribute('method');
                        document.getElementById("submitButton").onclick = function () {
                            createStudent(hrefValue, methodValue);
                        };

                        document.getElementById("next").disabled = $(xmlDoc).find('btnBlock').text() === 'true';
                        document.getElementById("prev").disabled = prevBtnBlocked;

                        $(xmlDoc).find('student').each(function () {

                            var selfLink = $(this).find('link[rel="self"]').attr('href');
                            var updateLink = $(this).find('link[rel="updateRecord"]').attr('href');
                            var deleteLink = $(this).find('link[rel="deleteRecord"]').attr('href');
                            var updateMethod = $(this).find('link[rel="updateRecord"]').attr('method');
                            var deleteMethod = $(this).find('link[rel="deleteRecord"]').attr('method');

                            if (i) {
                                $("#tableTr").html(
                                    ($(this).attr('id') ? '<th scope="col">Id</th>' : '') +
                                    ($(this).attr('name') ? '<th scope="col">Name</th>' : '') +
                                    ($(this).attr('phone') ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col">Actions</th>'
                                );
                                i = false;
                            }

                            html +=
                                `<tr xml>` +
                                ($(this).attr('id') ? `<td>${$(this).attr('id')}</td>` : ``) +
                                ($(this).attr('name') ? `<td><input class="form-control" type='text' id='${$(this).attr('id')}Name' value='${$(this).attr('name')}' name="name" /></td>` : ``) +
                            ($(this).attr('phone') ? `<td><input class="form-control" type='text' id='${$(this).attr('id')}Phone' value='${$(this).attr('phone')}' name="phone" /></td>` : ``) +
                                `<td>
                                        <button class="m-1 btn btn-primary" onClick='window.location.href="${selfLink}"'>Get</button>` +
                                `<button id="updateButton" class="updateButton m-1 btn btn-primary" onClick='updateStudent("${updateLink}", "${updateMethod}", "${$(this).attr("id")}")'>Update</button>` +
                                `<button class="m-1 btn btn-primary" onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                    </td>` +
                                `</tr>`;
                        });
                        $("#tbl").html(html);

                        if ($("#columns").val() === "id") {
                            var updateButtons = document.getElementsByClassName("updateButton");
                            for (var n = 0; n < updateButtons.length; n++) {
                                updateButtons[n].disabled = true;
                            }
                        } else {
                            $(".updateButton").attr("disabled", false);
                        }
                    }

                    else if (selectedFormat === 'json') {
                        result.forEach((linksObject) => {
                            document.getElementById("next").disabled = linksObject.btnBlock;
                            document.getElementById("prev").disabled = prevBtnBlocked;

                            document.getElementById("submitButton").onclick = function () {
                                createStudent(linksObject.addStudent.link.href, linksObject.addStudent.link.method);
                            };


                            if (i) {
                                $("#tableTr").html(
                                    (linksObject.students[0].Id ? '<th scope="col">Id</th>' : '') +
                                    (linksObject.students[0].Name ? '<th scope="col">Name</th>' : '') +
                                    (linksObject.students[0].Phone ? '<th scope="col">Phone</th>' : '') +
                                    '<th scope="col">Actions</th>');
                                i = false;
                            }

                            linksObject.students.forEach((student) => {
                                const linksArray = student.Links;

                                const selfLink = linksArray.find(link => link.rel === "self")?.href;
                                const updateLink = linksArray.find(link => link.rel === "updateRecord")?.href;
                                const deleteLink = linksArray.find(link => link.rel === "deleteRecord")?.href;
                                const updateMethod = linksArray.find(link => link.rel === "updateRecord")?.method;
                                const deleteMethod = linksArray.find(link => link.rel === "deleteRecord")?.method;

                                html +=
                                    `<tr json>` +
                                    (student.Id ? `<td>${student.Id}</td>` : ``) +
                                (student.Name ? `<td><input type='text' class="form-control" id='${student.Id}Name' value='${student.Name}' name="name" /></td>` : ``) +
                                (student.Phone ? `<td><input type='text' class="form-control" id='${student.Id}Phone' value='${student.Phone}' name="phone" /></td>` : ``) +
                                    `<td>
                                              <button class="m-1 btn btn-primary" onClick='window.location.href="${selfLink}"'>Get</button>` +
                                    `<button class="m-1 btn btn-primary" onClick='updateStudent("${updateLink}", "${updateMethod}", ${student.Id})'>Update</button>` +
                                    `<button class="m-1 btn btn-primary" onClick='deleteStudent("${deleteLink}", "${deleteMethod}")'>Delete</button>
                                        </td>` +
                                    `</tr>`;
                            })
                            $("#tbl").html(html);
                        })
                    }
                });
        }

    </script>
    <script src="~/Scripts/formValidation.js"></script>
</body>
</html>
